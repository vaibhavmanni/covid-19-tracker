{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountrySelector/CountrySelector.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountrySelector/CountrySelector.module.css","images/covid.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","text","url","fetchData","country","a","onChangeUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","title","CountrySelector","handleCountryChange","fetchedCountries","setfetchedCountries","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","Image","image","alt","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.e36d7bea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3hfuA\",\"card\":\"Cards_card__3JaiX\",\"infected\":\"Cards_infected__1JhZl\",\"recovered\":\"Cards_recovered__5ffrj\",\"deaths\":\"Cards_deaths__RZOvj\",\"text\":\"Cards_text__3xAC0\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if(!confirmed) {\r\n        return 'Loading..'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3}>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        {/* <Typography variant='body2' className={styles.text}>Number of people infected with COVID-19</Typography> */}\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        {/* <Typography variant='body2' className={styles.text}>Number of recoveries from COVID-19</Typography> */}\r\n                        <Typography variant='body2' className={styles.text}>DamnItThisWasMeantoBeHiddenStopSneakingAround</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        {/* <Typography variant='body2' className={styles.text}>Number of deaths due to COVID-19</Typography> */}\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let onChangeUrl = url;\r\n    if(country){\r\n        onChangeUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(onChangeUrl);\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        return modifiedData;\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchCountries = async () =>{\r\n    try{\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch(error){\r\n        console.log(error)\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ( { data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ?(\r\n        <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets:[\r\n                        {data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: 'blue',\r\n                        backgroundColor: 'rgba(0,0,255,0.4)',\r\n                        fill: true,\r\n                    },\r\n                        {data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.4)',\r\n                        fill: true,\r\n                    }\r\n                ],\r\n            }}\r\n        />) : null\r\n    );\r\n    \r\n    const barChart = (\r\n        confirmed\r\n            ?(\r\n                <Bar\r\n                    data={{\r\n                        labels: ['Infected', 'Recovered', 'Deaths'],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor:[\r\n                                'rgba(0,0,255,0.5)',\r\n                                'rgba(0,255,0,0.5)',\r\n                                'rgba(255,0,0,0.5)',\r\n                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current scenario in ${country}` }\r\n                    }}\r\n                />\r\n            )\r\n            : null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountrySelector.module.css'\r\nimport { fetchCountries } from '../../api'\r\n\r\nconst CountrySelector = ( { handleCountryChange } ) => {\r\n    const [fetchedCountries, setfetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountriesAPI = async () => {\r\n            setfetchedCountries(await fetchCountries());\r\n        }\r\n        fetchCountriesAPI();\r\n    }, [setfetchedCountries])\r\n    \r\n    console.log(fetchedCountries);\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n    {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountrySelector;","import React, { Component } from 'react'\r\n\r\nimport Cards from './components/Cards/Cards'\r\nimport Chart from './components/Chart/Chart'\r\nimport CountrySelector from './components/CountrySelector/CountrySelector'\r\nimport Image from './images/covid.png'\r\n\r\nimport styles from './App.module.css'\r\n\r\nimport { fetchData } from './api'\r\n\r\nexport default class App extends Component {\r\n    \r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        this.setState({data: fetchedData})\r\n    }\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data: fetchedData, country: country})\r\n    }\r\n\r\n    render() {\r\n        const {data, country} = this.state;\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <img src={Image} className={styles.image} alt='COVID-19'/>\r\n                <CountrySelector handleCountryChange={this.handleCountryChange}/>\r\n                <Cards data={data}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2wDVY\",\"image\":\"App_image__wWQb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3qxtq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountrySelector_formControl__2V2nw\"};","module.exports = __webpack_public_path__ + \"static/media/covid.4a894caf.png\";"],"sourceRoot":""}